<?xml version="1.0"?>
<ruleset name="WordPress Theme">
	<!-- For more information: https://make.wordpress.org/themes/handbook/review/ -->
	<description>Standards any Theme to be published on wordpress.org should comply with.</description>

	<autoload>./../WordPress/PHPCSAliases.php</autoload>

	<!-- Treat all files as UTF-8. -->
	<config name="encoding" value="utf-8"/>

	<rule ref="WordPress.Theme"/>

	<!-- No PHP short open tags allowed. -->
	<!-- Covers: https://github.com/Otto42/theme-check/blob/master/checks/phpshort.php -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>

	<!-- Alternative PHP open tags not allowed. -->
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

	<!-- Files which start with a PHP open tag should have no whitespace preceding it. -->
	<!-- Once PHPCS 3.x is the minimum, this block can be removed as errorcodes can then be included individually. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
		<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile"/>
		<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EndLine"/>
		<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines"/>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
		<message>To help prevent PHP "headers already send" errors, whitespace before the PHP open tag should be removed.</message>
	</rule>

	<!-- Files should omit the closing PHP tag at the end of a file. -->
	<rule ref="PSR2.Files.ClosingTag"/>
	<rule ref="PSR2.Files.ClosingTag.NotAllowed">
		<type>warning</type>
		<message>To help prevent PHP "headers already send" errors the PHP closing tag at the end of the file should be removed.</message>
	</rule>

	<!-- Mixed line endings are not allowed. -->
	<!-- Covers: https://github.com/Otto42/theme-check/blob/master/checks/lineendings.php -->
	<rule ref="Internal.LineEndings.Mixed">
		<type>error</type>
	</rule>

	<!-- No minification of scripts or files unless you provide original files. -->
	<!-- Covers: https://make.wordpress.org/themes/handbook/review/required/#stylesheets-and-scripts -->
	<rule ref="Internal.Tokenizer.Exception">
		<message>File appears to be minified and cannot be processed. The non-minified file must be included too.</message>
	</rule>

	<!-- No ByteOrderMark allowed - important to prevent issues with content being sent before headers. -->
	<rule ref="Generic.Files.ByteOrderMark"/>

	<!-- PHP tags without anything between them is just sloppy. -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>

	<!-- No removal of the admin bar allowed -->
	<!-- Covers: https://github.com/wordpress/theme-check/blob/master/checks/adminbar.php -->
	<rule ref="WordPress.VIP.AdminBarRemoval">
		<properties>
			<property name="remove_only" value="false"/>
		</properties>
	</rule>

	<!-- Check that the I18N functions are used correctly. -->
	<!-- This sniff can also check the text domain, provided it's passed to PHPCS. -->
	<rule ref="WordPress.WP.I18n"/>

	<!-- No hard coding of scripts and styles. Everything should be enqueued. -->
	<rule ref="WordPress.WP.EnqueuedResources"/>

	<!-- Prevent path disclosure when using add_theme_page(). -->
	<rule ref="WordPress.VIP.PluginMenuSlug"/>

	<!-- Do not silence error notices. e.g. Error Control Operator @.. -->
	<rule ref="Generic.PHP.NoSilencedErrors">
		<properties>
			<property name="error" value="true"/>
		</properties>
	</rule>

	<!-- While most themes shouldn't query the database directly, if they do, it should be done correctly. -->
	<!-- Don't use the PHP database functions and classes, use the WP abstraction layer instead. -->
	<rule ref="WordPress.DB.RestrictedClasses"/>
	<rule ref="WordPress.DB.RestrictedFunctions"/>

	<!-- All SQL queries should be prepared as close to the time of querying the database as possible. -->
	<rule ref="WordPress.WP.PreparedSQL"/>

	<!-- Verify that placeholders in prepared queries are used correctly. -->
	<rule ref="WordPress.DB.PreparedSQLPlaceholders"/>

	<!-- Validate and/or sanitize untrusted data before entering into the database. -->
	<!--
		Revert to changing the type at the sniff level instead of the error code level
		once the PR has been merged and the miminmum PHPCS version has been increased.
		https://github.com/squizlabs/PHP_CodeSniffer/pull/1247
	-->
	<rule ref="WordPress.VIP.ValidatedSanitizedInput"/>
	<rule ref="WordPress.VIP.ValidatedSanitizedInput.InputNotValidated">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.VIP.ValidatedSanitizedInput.InputNotSanitized">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.VIP.ValidatedSanitizedInput.InputNotValidatedNotSanitized">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.VIP.ValidatedSanitizedInput.MissingUnslash">
		<type>warning</type>
	</rule>

	<!-- All untrusted data should be escaped before output. -->
	<!--
		Revert to changing the type at the sniff level instead of the error code level
		once the PR has been merged and the miminmum PHPCS version has been increased.
		https://github.com/squizlabs/PHP_CodeSniffer/pull/1247
	-->
	<rule ref="WordPress.XSS.EscapeOutput"/>
	<rule ref="WordPress.XSS.EscapeOutput.UnsafePrintingFunction">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.XSS.EscapeOutput.OutputNotEscaped">
		<type>warning</type>
	</rule>

	<!-- Prohibit the use of the backtick operator. -->
	<rule ref="Generic.PHP.BacktickOperator"/>

	<!-- Discourage a number of functions for usage in a theme. -->
	<rule ref="WordPress.PHP.DiscouragedFunctions"/>
	<rule ref="WordPress.PHP.POSIXFunctions"/>

	<!-- Prohibit overwriting of WordPress global variables. -->
	<rule ref="WordPress.Variables.GlobalVariables"/>

	<!-- Prohibit the use of the eval() PHP language construct. -->
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule>

	<!-- Prohibit the use of the `goto` PHP language construct. -->
	<!-- Duplicate of upstream PHPCS sniff. Should defer to upstream version once minimum PHPCS
		 requirement has gone up to PHPCS 3.2.0 or higher. -->
	<rule ref="WordPress.PHP.DiscourageGoto"/>
	<rule ref="WordPress.PHP.DiscourageGoto.Found">
		<type>error</type>
		<message>The "goto" language construct should not be used.</message>
	</rule>

	<!-- Check for use of deprecated WordPress classes, functions and function parameters. -->
	<rule ref="WordPress.WP.DeprecatedClasses"/>
	<rule ref="WordPress.WP.DeprecatedFunctions"/>
	<rule ref="WordPress.WP.DeprecatedParameters"/>

	<!-- Check for deprecated WordPress constants. -->
	<!--
		Change the type at the sniff level instead of the error code level
		once the PR has been merged and the miminmum PHPCS version has been increased.
		https://github.com/squizlabs/PHP_CodeSniffer/pull/1247
	-->
	<rule ref="WordPress.WP.DiscouragedConstants"/>
	<rule ref="WordPress.WP.DiscouragedConstants.UsageFound">
		<type>error</type>
	</rule>
	<rule ref="WordPress.WP.DiscouragedConstants.DeclarationFound">
		<type>error</type>
	</rule>

	<!-- Verify that everything in the global namespace is prefixed. -->
	<!-- Covers: https://make.wordpress.org/themes/handbook/review/required/#code - last bullet. -->
	<!-- NOTE: this sniff needs a custom property to be set for it to be activated. -->
	<!-- See: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#naming-conventions-prefix-everything-in-the-global-namespace-->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals" />

	<!-- Check for correct spelling of WordPress. -->
	<!-- Covers: https://make.wordpress.org/themes/handbook/review/required/#naming - third bullet. -->
	<rule ref="WordPress.WP.CapitalPDangit">
		<type>error</type>
	</rule>

	<!-- If TGMPA is used, verify that the version is up to date. -->
	<rule ref="WordPress.Theme.CorrectTGMPAVersion">
		<!-- Require that the Custom Generator is used to download & adjust TGMPA. -->
		<properties>
			<property name="required_flavour" value="wporg"/>
		</properties>
	</rule>

	<!-- Themes should not use the PHP session functions nor access the $_SESSION variable. -->
	<rule ref="WordPress.VIP.SessionFunctionsUsage"/>
	<rule ref="WordPress.VIP.SessionVariableUsage"/>

	<!-- Themes should never touch the timezone. -->
	<rule ref="WordPress.VIP.TimezoneChange"/>

</ruleset>
